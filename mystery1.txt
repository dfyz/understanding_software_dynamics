2.1 Probably closer to 1.

2.2

-O0: 1000000000 iterations, 2758607886 cycles, 2.76 cycles/iteration
-O2: 1000000000 iterations, 37 cycles, 0.00 cycles/iteration

The -O2 version basicaly optimized the sum away:
0000108f  0f31               rdtsc
00001091  4889c1             mov     rcx, rax
00001094  48c1e220           shl     rdx, 0x20
00001098  4809d1             or      rcx, rdx
0000109b  0f31               rdtsc

The -O0 version is also problematic, since it spills the registers to the stack:

000011b7  8b45d4             mov     eax, dword [rbp-0x2c {var_34}]
000011ba  4898               cdqe
000011bc  480145d8           add     qword [rbp-0x28 {var_30}], rax

2.3

-O0: 1000000000 iterations, 2763865327 cycles, 2.76 cycles/iteration
     1649637847 215000000000
-O2: 1000000000 iterations, 37 cycles, 0.00 cycles/iteration
     1649637874 242000000000

The -O2 version still managed to optimize the loop away.
This time it uses a multiplication by kIterations outside of the loop
to get the final result:

0000108d  4989c4             mov     r12, rax
...
000010de  450fb6c4           movzx   r8d, r12b
000010e7  4d69c000ca9a3b     imul    r8, r8, 1000000000
...
00001101  e86affffff         call    __fprintf_chk


The -O0 version remains the same.

2.4

-O0: 1000000000 iterations, 6490183057 cycles, 6.49 cycles/iteration
     1649637906 18000000000
-O2: 1000000000 iterations, 900758837 cycles, 0.90 cycles/iteration
     1649637926 38000000000

TODO: explain both differences